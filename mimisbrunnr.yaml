---

# The unique fully-qualified-domain-name of the server.  It is provided to 
# the X-Mimisbrunnr-Server header for showing what server fulfilled the request 
# sent.
# (Optional)
server: "mimisbrunnr-instance-123.example.com"

########################################
#   Labeling/Tracing via HTTP Headers Configuration
########################################

# Provides this build number to the X-mimisbrunnr-Build header for
# showing machine version information.  The build number SHOULD
# match the scheme `version-build` but there is not a strict requirement.
# (Optional)
build:

# Provides the region information to the X-mimisbrunnr-Region header
# for showing what region this machine is located in.  The region
# is arbitrary and optional.
# (Optional)
region:

# Provides the flavor information to the X-mimisbrunnr-Flavor header
# for showing what flavor this machine is associated with.  The flavor
# is arbitrary and optional.
# (Optional)
flavor:


servers:
  primary:
    address: :6600
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - mimisbrunnr
      X-Midt-Version:
        - development
  metrics:
    address: :6601
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - mimisbrunnr
      X-Midt-Version:
        - development
  health:
    address: :6602
    disableHTTPKeepAlives: true
    header:
      X-Midt-Server:
        - mimisbrunnr
      X-Midt-Version:
        - development

prometheus:
  defaultNamespace: codex
  defaultSubsystem: mimisbrunnr
  constLabels:
    development: "true"

# ########################################
# #   Primary Endpoint Configuration
# ########################################

# # primary defines the details needed for the primary endpoint.  The
# # primary endpoint accepts requests for events for a specific device id.
# primary:
#   # address provides the port number for the endpoint to bind to.
#   # ":443" is ideal, but may require some special handling due to it being
#   # a reserved (by the kernel) port.
#   address: ":5000"
#   # HTTPS/TLS 
#   #
#   # certificateFile provides the public key and CA chain in PEM format if
#   # TLS is used.  Note: the certificate needs to match the fqdn for clients
#   # to accept without issue.
#   #
#   # keyFile provides the private key that matches the certificateFile
#   # (Optional)
#   # certificateFile: "/etc/gungnir/public.pem"
#   # keyFile: "/etc/gungnir/private.pem"

########################################
#   Health Endpoint Configuration
########################################

# health defines the details needed for the health check endpoint.  The
# health check endpoint is generally used by services (like AWS Route53
# or consul) to determine if this particular machine is healthy or not.
health:
  # port provides the port number for the endpoint to bind to.
  # ":80" is ideal, but may require some special handling due to it being
  # a reserved (by the kernel) port.
  port: ":5001"
  # endpoint provides the endpoint that will provide the health check 
  # information.
  endpoint: "/health"

# ########################################
# #   Debugging/Pprof Configuration
# ########################################

# # pprof defines the details needed for the pprof debug endpoint.
# # (Optional)
# pprof:
#   # address provides the port number for the endpoint to bind to.
#   address: ":5002"

# ########################################
# #   Metrics Configuration
# ########################################

# # metric defines the details needed for the prometheus metrics endpoint
# # (Optional)
# metric:
#   # address provides the port number for the endpoint to bind to.  Port 9389
#   # was chosen because it does not conflict with any of the other prometheus
#   # metrics or other machines in the xmidt cluster.  You may use any port you
#   # wish.
#   address: ":5003"

#   # metricsOptions provides the details needed to configure the prometheus
#   # metric data.  Metrics generally have the form:
#   #
#   # {namespace}_{subsystem}_{metric}
#   #
#   # so if you use the suggested value below, your metrics are prefixed like
#   # this:
#   #
#   # xmidt_mimisbrunnr_{metric}
#   #
#   # (Optional)
#   metricsOptions:
#     # namespace is the namespace of the metrics provided
#     # (Optional)
#     namespace: xmidt
#     # subsystem is the subsystem of the metrics provided
#     # (Optional)
#     subsystem: mimisbrunnr

########################################
#   Logging Related Configuration
########################################

# log configures the logging subsystem details
log:
  # file is the name of the most recent log file.  If set to "stdout" this
  # will log to os.Stdout.
  # (Optional) defaults to os.TempDir()
  #file: "/var/log/mimisbrunnr/mimisbrunnr.log"
  file: "stdout"

  # level is the logging level to use - INFO, DEBUG, WARN, ERROR
  # (Optional) defaults to ERROR
  level: "DEBUG"

  # maxsize is the maximum file size in MB
  # (Optional) defaults to max 100MB
  maxsize: 50

  # maxage is the maximum number of days to retain old log files
  # (Optional) defaults to ignore age limit (0)
  maxage: 30

  # maxbackups is the maximum number of old log files to retain
  # (Optional) defaults to retain all (0)
  maxbackups: 10

  # json is a flag indicating whether JSON logging output should be used.
  # (Optional) defaults to false
  json: true


# ########################################
# #   Authorization Related Configuration
# ########################################

#   # Any combination of these configurations may be used for authorization.
#   # If ANY match, the request goes onwards.

#   # jwtValidators provides the details about where to get the keys for JWT
#   # kid values and their associated information (expiration, etc) for JWTs
#   # used as authorization
#   # (Optional)
#   jwtValidators:
#     - 
#       keys:
#         factory:
#           uri: "https://jwt.example.com/keys/{keyId}"
#         purpose: 0
#         updateInterval: 604800000000000

#   # authHeader provides the list of basic auth headers that mimisbrunnr will accept
#   # as authorization
#   # (Optional)
#   authHeader: ["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=","dXNlcjpwYXNz"]



########################################
#   Norn Registry Related Configuration
########################################

# nornRegistry provides configuration for storing and retrieving norns from argus.
nornRegistry: 
  
  # argus contains the required configuration that is need to store and retrieve norns.
  # argus documentation: https://github.com/xmidt-org/argus#details
  argus:

    # bucket is used to store and retrieve norns.
    # (Required)
    bucket: "norns-mimisbrunnr"

    # address is the location to connect to argus.
    # (Required)
    address: "http://argus:6600"

    # pullInterval is how often to call argus to update Norns.
    # (Required)
    pullInterval: "2s"

    # auth is the authentication method for argus.
    # (Required)
    auth:

      # basic configures basic authentication for argus
      # Must be of form: 'Basic xyz=='
      basic: "Basic dXNlcjpwYXNz"
      
#
#      # jwt configures jwt style authentication for argus.
#      JWT:
#        # requestHeaders are added to the request for the token.
#        # (Optional)
#        # requestHeaders:
#        #   "": ""
#
#        # authURL is the URL to access for the token.
#        authURL: ""
#
#        # timeout is how long the request to get the token will take before
#        # timing out.
#        timeout: "1m"
#
#        # buffer is the length of time before a token expires to get a new token.
#        buffer: "2m"



########################################
#   Dispatcher Related Configuration
########################################

# sender provides details to set up each "sender" that is required for for dispatcher
# to deliver events.
sender:

  # numWorkersPerSender defines the maximum number of outgoing concurrent
  # HTTP client requests to a particular webhook url.  This number is for
  # THIS server only, to determine the total maximum, multiply this value
  # by the number of caducues machines.
  # (Optional) defaults to a minimum of 5
  maxWorkers: 100

  # responseHeaderTimeout is the time to wait for a response before giving up
  # and marking the delivery a failure.
  # (Optional) default to a minimum of 10s
  responseHeaderTimeout: 10s

  # idleConnTimeout is the amount of time a connection will remain idle 
  # before closing itself.
  # Zero means no limit
  # (Required)
  idleConnTimeout: 1s

  # deliveryInterval is the time to wait after a failed delivery attempt
  # before attempting to deliver again
  # (Required) max delivery interval set to 1 hour
  deliveryInterval: 10ms

  # deliveryRetries is the maximum number of delivery attempts mimisbrunnr will
  # make before dropping an event.
  # (Required) max retries is set to 10
  deliveryRetries: 1

  # queueSize provides the max number of event that can be stored on the 
  # queue. Once events are taken off the queue, they will sent to dispatcher for 
  # delivery.
  # (Optional) defaults to 100
  filterQueueSize: 500



########################################
#   Event Parser Related Configuration
########################################

# requestParser provides the information needed for starting the parser, which 
# parses the deviceID from events.
parser:

  # queueSize provides the maximum number of events that can be added to the 
  # queue. Once events are taken off the queue, the deviceID is parsed from the event.  
  # (Optional) defaults to a minimum value 5
  queueSize: 100

  # maxWorkers provides the maximum number of workers parsing events at a 
  # time.
  # (Optional) defaults to a minimum value 5
  maxWorkers: 100

  # regexRules provides rules for events whose destinations match the regular 
  # expression. Mimisbrunnr uses the first rule whose regex matches an event's destination. 
  # If the event matches the regex of a rule, Mimisbrunnr gets instructions on 
  # how to parse the deviceID based on the type of event (eventType).
  # The eventType indicates where to find the device id in the event. If the 
  # event type is "State", the device id is parsed out of the event Destination.
  # Otherwise, the event Source is used as the device id.
  # eventType options: "State", "Default" 
  regexRules:
      - regex: ".*/online$"
        storePayload: true
        ruleTTL: 30s
        eventType: "State"
      - regex: ".*/offline$"
        storePayload: true
        ruleTTL: 30s
        eventType: "State"

